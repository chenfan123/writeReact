(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

	const FunctionComponent = 0; // 函数组件
	const HostRoot = 3; // 项目根节点
	const HostComponent = 5; // 类似于1个div对应的tag类型就是这个
	const HostText = 6; // 元素中的文本

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const ChildDeletion = 0b0000100;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    /**
	     * @param tag 就是这个FiberNode是什么类型的节点
	     * @param pendingProps 就是当前fiber接下来有哪些Props需要改变
	     * @param key
	     */
	    type;
	    tag;
	    pendingProps;
	    key;
	    stateNode;
	    ref;
	    return;
	    sibling;
	    child;
	    index;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        // 实例
	        this.tag = tag;
	        this.key = key;
	        this.stateNode = null; // 对于HostComponent来说如果是个div，那么这个stateNode就保存了div的DOM
	        this.type = null; // fiberNode的类型，functionCom来说，type就是0
	        // 构成树状结构
	        this.return = null; // 指向父fiberNode
	        this.sibling = null; // 指向兄弟
	        this.child = null; // 指向子
	        this.index = 0; // 如果同级的fiberNode有好几个，第一个就是0，第二个就是1
	        this.ref = null;
	        // 作为工作单元
	        this.pendingProps = pendingProps; // 刚开始准备工作的时候props
	        this.memoizedProps = null; // 工作完之后的props
	        this.memoizedState = null;
	        this.updateQueue = null;
	        this.alternate = null; // 用于当前fiberNode与另一个fiberNode进行切换
	        // 副作用
	        this.flags = NoFlags; // 用于存储标记（删除、插入、移动等等）
	        this.subtreeFlags = NoFlags; // 子树中包含的flags
	    }
	}
	class FiberRootNode {
	    container;
	    current; // 指针指向hostRootFiber
	    finishedWork; // 指向更新完成之后的hostRootFiber
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this; // hostRootFiber的stateNode指向fiberRootNode
	        this.finishedWork = null;
	    }
	}
	// 创建wip
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    // 首屏渲染的时候wip是null
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        // 清除副作用
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedState = current.memoizedState;
	    wip.memoizedProps = current.memoizedProps;
	    return wip;
	};
	// 根据ReactElement创建fiber
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // <div/> type:'div'
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	// 代表更新的数据结构Update
	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	//消费Update的数据结构UpdateQueue: UpdateQueue里面有一个shared.pending这个字段，这个字段指向update
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	// 往UpdateQueue里增加Update
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	// UpdateQueue消费Update的方法
	const processUpdateQueue = (baseState, // 初始的状态
	pendingUpdate // 消费的Update
	) => {
	    const result = {
	        memoizedState: baseState // 一开始工作完之后的memoizedState是原先的State
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        // 2种更新方式:1. setState((pre)=>{return newSTate})
	        if (action instanceof Function) {
	            result.memoizedState = action(baseState);
	        }
	        else {
	            // 2种更新方式:2. setState(123)
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol;
	const REACT_ELEMENT_TYPE = supportSymbol ? Symbol.for('react.element') : 0xeac7;

	/**
	 * 生成子节点以及标记flags的过程
	 * @param shouldTrackEffects 是否追踪副作用，false就不追踪，就不会标记flags
	 */
	function ChildReconciler(shouldTrackEffects) {
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        // 根据ReactElement创建fiber
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 插入单一节点
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            // 首屏渲染的情况下，标记一个Placement
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    // 设计成闭包的形式是为了根据不同的shouldTrackEffects返回不同的reconcileChildFibers的实现
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断当前fiber的类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // @todo 多节点的类型
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	function renderWithHooks(wip) {
	    const Component = wip.type; // 函数组件的函数
	    const props = wip.pendingProps; // 获取props
	    const children = Component(props); // 执行函数组件，返回reactElement
	    return children;
	}

	// 递归中的递阶段
	const beginWork = (wip) => {
	    // 比较ReactElement 和 fiberNode，并返回子fiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            // HostRoot的beginWork流程：1. 计算状态的最新值 2. 创造子fiberNode
	            return updateHostRoot(wip);
	        case HostComponent:
	            // 创造子fiberNode
	            return updateHostComponent(wip);
	        case HostText: // 没有子节点
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip);
	        default:
	            {
	                console.log('beginWork未实现的类型');
	            }
	            break;
	    }
	    return null;
	};
	function updateFunctionComponent(wip) {
	    const nextChildren = renderWithHooks(wip);
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending); // memoizedState就是最新的状态,这里就是传进来的reactElement
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState; // 这里就是子reactElement
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps; // 子的reactElement在父reactElement的props里（props.children）
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate; // 因为要对比current fiberNode和reactElement,生成子节点的wip fiberNode
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount流程，此处可以优化，很多节点多次Placement可以在构建好离屏DOM树的时候执行1次Placement
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	// export const createInstance = (type: string, props: any): Instance => {
	const createInstance = (type) => {
	    // TODO 处理props
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        // 向下遍历
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 要么找到底了，要不找到的节点不包含subtreeFlags
	            // 向上遍历 DFS
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        // 将Placement从flags中移出
	        finishedWork.flags &= -2;
	    }
	};
	const commitPlacement = (finishedWork) => {
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    // parent DOM
	    const hostParent = getHostParent(finishedWork);
	    // finishedWork～～DOM,finishedWork对应的DOM append parentDOM
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        // HostComponent HostRoot
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到hostParent');
	    }
	    return null;
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    // fiber 找到宿主环境host类型的fiber
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	// 递归中的归
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // mount
	                // 构建离屏的DOM树
	                // 1. 构建DOM
	                const instance = createInstance(wip.type);
	                // 2. 将DOM插入到DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // mount
	                // 构建离屏的DOM树
	                // 1. 构建DOM
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.log('未处理的complete情况', wip);
	            }
	            break;
	    }
	};
	/**
	 * 希望在parent节点下插入wip这个节点
	 * 但是wip本身可能不是一个dom节点，所以需要递归，寻找hostComponent或者hostText节点
	 *
	 * @param parent
	 * @param wip
	 * @returns
	 */
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            // 如果找到了执行appendChild的操作
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            // 如果没有找到就继续往下找
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        // 往上找
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                // 回到了原点
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	// 将当前节点的子节点和子节点的兄弟节点中的flags冒泡到当前节点的SubtreeFlags
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags; // subtreeFlags就包含了当前节点的子节点的subtreeFlags
	        subtreeFlags |= child.flags; // 以及child本身的flags
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	// 完整的工作循环文件
	let workInProgress = null; // 一个指针指向当前正在工作的fiberNode
	// 初始化，让workInProgress指向遍历的第一个fiberNode
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProgress(root.current, {});
	}
	// 在fiber中调度update，连接 container 和 renderRoot方法
	function scheduleUpdateOnFiber(fiber) {
	    // @TODO 调度功能
	    // 从当前更新的fiber遍历到fiberRootNode
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	// 从当前节点遍历到根节点
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        // !== null就说明当前节点是普通的fiberNode
	        node = parent;
	        parent = node.return;
	    }
	    // 跳出循环,一般就是到了hostRootFiber
	    if (node.tag === HostRoot) {
	        return node.stateNode; // 就是fiberRootNode
	    }
	    return null;
	}
	function renderRoot(root) {
	    prepareFreshStack(root);
	    // 执行递归流程
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('workLoop 发生错误', e);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // wip fiberNode树 树中的flags
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在3个子阶段要执行的操作
	    // root 本身的flags    root的subtreeFlags
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation Placement
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	// 只要workInProgress不是null就可以一直执行
	function workLoop() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        // 说明递归的递到最深层了，开始归阶段
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	// 遍历兄弟节点
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling; // 获取兄弟节点
	        // 如果兄弟节点存在，赋值给workInprogress
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        // 不存在递归往上
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	/**
	 * ReactDOM.createRoot().render()
	 * 调用createRoot()方法之后，内部会执行createContainer
	 */
	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	/**
	 * ReactDOM.createRoot().render()
	 * 执行render方法之后，在render方法内部就会执行updateContainer方法
	 * 返回的element对于reactDom.createRoot(root).render(<App/>)来说，App组件对应的ReactElement就是这个element
	 */
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element); // 创建1个update，这次更新跟element相关的
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	// ReactDOM.createRoot(root).render(<App/>)
	function createRoot(container) {
	    const root = createContainer(container); // 这个container就是根节点
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
